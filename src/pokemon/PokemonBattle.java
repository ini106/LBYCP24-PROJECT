/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pokemon;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;
import javax.swing.*;

/**
 *
 * @author Johann Carta
 */
public class PokemonBattle extends javax.swing.JFrame {

    /**
     * Creates new form PokemonBattle
     */
    int[] pokemonlist = {1, 4, 7, 25, 144, 145};
    int[] enemyPokemonList = {1, 4, 7, 25, 144, 145};
    int[] playerLives = {100, 100, 100, 100, 100, 100};
    public int[] playerMaxLives = {100, 100, 100, 100, 100, 100};
    int[] enemyLives = {100, 100, 100, 100, 100, 100};
    public int currentPokemon = 0;//array index, zero based 0-5 only, first pokemon = 0, second =1 and so on.
    String[] trainers = {"Alder", "Brycen", "Cynthia", "Cilan", "Iris", "Drayden"};
    int counter_enemy = 0;//enemy trainer
    int enemyPokemonCounter = 0;//enemy pokemon
    int lose = 0;//count of pokemon lost
    int win = 0;//count of pokemon defeated
    int gender;
    String user;
    Color buttonClr = Color.orange;

    public PokemonBattle() throws SQLException {
        initComponents();
        System.out.println(UIManager.getLookAndFeel());
        System.out.println(UIManager.getSystemLookAndFeelClassName());
        Dimension size = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation((size.width - this.getSize().width) / 2, (size.height - this.getSize().height) / 2);
    }

    public PokemonBattle(String user, int gender, int count_enemy) throws SQLException, ClassNotFoundException {
        initComponents();
        nextBtn.setVisible(false);
        switchBtn.setBackground(buttonClr);
        attack1.setBackground(buttonClr);
        attack2.setBackground(buttonClr);
        attack3.setBackground(buttonClr);
        attack4.setBackground(buttonClr);
        nextBtn.setBackground(buttonClr);
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("/Pokemon-Java/Pokeball.PNG")));
        this.gender = gender;
        this.user = user;
        counter_enemy = count_enemy;
        ImageIcon bbry = null;
        if (gender == 0) {
            bbry = new ImageIcon(getClass().getResource("/Pokemon-Java/Female.png"));
        } else {
            bbry = new ImageIcon(getClass().getResource("/Pokemon-Java/Male.png"));
        }
        jLabel1.setIcon(bbry);
        playerLifeBarProgressBar.setValue(100);
        enemyLifeBarProgressBar.setValue(100);
        Dimension size = Toolkit.getDefaultToolkit().getScreenSize();

        this.setLocation((size.width - this.getSize().width) / 2, (size.height - this.getSize().height) / 2);
        initPokemonLists();
        initLives();
        initPokemon(user, 0);
        announce2.setText("Pokemon Trainer "+trainers[counter_enemy]+" has challenged you into a Pokemon Battle");
        announce.setText(trainers[counter_enemy]+" chose "+enemyPokemonName.getText());
        announce1.setText("You chose "+pokemonName.getText());
    }

    public boolean enemyAttack(int value) throws InterruptedException {
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");
            PreparedStatement pst = conn.prepareStatement("Select * from moves where number = ?");
            pst.setString(1, enemyPokemonList[enemyPokemonCounter] + "");
            ResultSet rs = pst.executeQuery();
            rs.next();
            conn.close();
            return attack("damage" + (value + 1), "enemy");
        } catch (SQLException ex) {
            Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
        }
        return true;
    }

    /*
    NOTE!
    This is an example on how you change the png file:
    
        ImageIcon bbry = new ImageIcon(getClass().getResource("/Pokemon-Java/Female.png"));
        jLabel1.setIcon(bbry);
     */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jInternalFrame1 = new javax.swing.JInternalFrame();
        jPanel1 = new javax.swing.JPanel();
        switchBtn = new javax.swing.JButton();
        attack1 = new javax.swing.JButton();
        attack2 = new javax.swing.JButton();
        attack3 = new javax.swing.JButton();
        attack4 = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        announce1 = new javax.swing.JLabel();
        announce2 = new javax.swing.JLabel();
        announce = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        playerPokemonImage = new javax.swing.JLabel();
        enemy = new javax.swing.JLabel();
        playerLifeBarProgressBar = new javax.swing.JProgressBar();
        playerLifeBarLabel = new javax.swing.JLabel();
        enemyPokemonImage = new javax.swing.JLabel();
        enemyLifeBarProgressBar = new javax.swing.JProgressBar();
        enemyLifeBarLabel = new javax.swing.JLabel();
        pokemonName = new javax.swing.JLabel();
        enemyPokemonName = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        jInternalFrame1.setVisible(true);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 153), 5, true));
        jPanel1.setLayout(null);

        switchBtn.setText("Switch");
        switchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                switchBtnActionPerformed(evt);
            }
        });
        jPanel1.add(switchBtn);
        switchBtn.setBounds(360, 90, 80, 60);

        attack1.setText("Attack1");
        attack1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attack1ActionPerformed(evt);
            }
        });
        jPanel1.add(attack1);
        attack1.setBounds(40, 90, 147, 25);

        attack2.setText("Attack2");
        attack2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attack2ActionPerformed(evt);
            }
        });
        jPanel1.add(attack2);
        attack2.setBounds(40, 120, 147, 25);

        attack3.setText("Attack3");
        attack3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attack3ActionPerformed(evt);
            }
        });
        jPanel1.add(attack3);
        attack3.setBounds(190, 90, 151, 25);

        attack4.setText("Attack4");
        attack4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                attack4ActionPerformed(evt);
            }
        });
        jPanel1.add(attack4);
        attack4.setBounds(190, 120, 151, 25);

        nextBtn.setFont(new java.awt.Font("Antigone-Cd", 0, 18)); // NOI18N
        nextBtn.setText("Next");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });
        jPanel1.add(nextBtn);
        nextBtn.setBounds(20, 100, 440, 50);
        jPanel1.add(announce1);
        announce1.setBounds(20, 60, 444, 20);
        jPanel1.add(announce2);
        announce2.setBounds(20, 20, 444, 17);
        jPanel1.add(announce);
        announce.setBounds(20, 40, 444, 17);

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 260, 480, 170));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pokemon-Java/Male.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 133, -1, -1));

        playerPokemonImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pokemon-Java/Pokemon_Back/25.png"))); // NOI18N
        getContentPane().add(playerPokemonImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 170, -1, -1));

        enemy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pokemon-Java/Alder.png"))); // NOI18N
        getContentPane().add(enemy, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 90, -1, -1));

        playerLifeBarProgressBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                playerLifeBarProgressBarStateChanged(evt);
            }
        });
        getContentPane().add(playerLifeBarProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 140, -1, -1));

        playerLifeBarLabel.setText("jLabel2");
        getContentPane().add(playerLifeBarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 120, -1, -1));

        enemyPokemonImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pokemon-Java/Pokemon_Front/4.png"))); // NOI18N
        getContentPane().add(enemyPokemonImage, new org.netbeans.lib.awtextra.AbsoluteConstraints(290, 120, -1, -1));

        enemyLifeBarProgressBar.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                enemyLifeBarProgressBarStateChanged(evt);
            }
        });
        getContentPane().add(enemyLifeBarProgressBar, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 110, -1, -1));

        enemyLifeBarLabel.setText("enemylife");
        getContentPane().add(enemyLifeBarLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 90, -1, -1));

        pokemonName.setText("Name");
        getContentPane().add(pokemonName, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 120, -1, -1));

        enemyPokemonName.setText("Name");
        getContentPane().add(enemyPokemonName, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 90, -1, -1));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pokemon-Java/battle base.png"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 210, -1, 60));

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pokemon-Java/battle base.png"))); // NOI18N
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 160, -1, 60));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Pokemon-Java/Webp.net-resizeimage.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void changeUserPokemonImage(int number) {
        ImageIcon bbry = new ImageIcon(getClass().getResource("/Pokemon-Java/Pokemon_Back/" + number + ".png"));
        playerPokemonImage.setIcon(bbry);
    }

    private void changeEnemyImage(String Name) {
        ImageIcon bbry = new ImageIcon(getClass().getResource("/Pokemon-Java/Pokemon_Trainers/" + Name + "-sprite.png"));
        enemy.setIcon(bbry);
    }

    private void changeEnemyPokemonImage(int number) {
        ImageIcon bbry = new ImageIcon(getClass().getResource("/Pokemon-Java/Pokemon_Front/" + number + ".png"));
        enemyPokemonImage.setIcon(bbry);
    }
    private void playerLifeBarProgressBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_playerLifeBarProgressBarStateChanged

    }//GEN-LAST:event_playerLifeBarProgressBarStateChanged
    private boolean attack(String attackDamage, String attacker) throws SQLException, InterruptedException {
        
        String type = "";
        String enemytype = "";
        int damage = 0;
        int value = Integer.parseInt(attackDamage.charAt(6) + "");
        double bonus = 1;
        if (attacker.equals("player")) {
            //getting the attack damage and type of the player pokemon
            String temp = "";
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");
                PreparedStatement pst = conn.prepareStatement("Select * from moves where Number = ?");
                pst.setString(1, pokemonlist[currentPokemon] + "");
                ResultSet rs = pst.executeQuery();
                rs.next();
                type = rs.getString("type" + value);
                System.out.println(type + "");
                damage = rs.getInt(attackDamage);
                temp = (rs.getString("name") + " uses " + rs.getString("attack" + value));
                conn.close();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
            }
            //getting the pokemon type of the enemy pokemon

            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");
            PreparedStatement pst = conn.prepareStatement("Select * from moves where Number = ?");
            pst.setString(1, enemyPokemonList[enemyPokemonCounter] + "");
            ResultSet rs = pst.executeQuery();
            rs.next();
            enemytype = rs.getString("Type");
            System.out.println(enemytype + "");
            bonus = findBonus(type, enemytype);
            int life = enemyLives[enemyPokemonCounter];
            enemyLives[enemyPokemonCounter] = (int) (life - (damage * bonus));
            String notif = "";
            if (bonus == 2) {
                notif = ". It was super effective";
            } else if (bonus == 0) {
                notif = ". It had no effect";
            } else if ((bonus < 1) && (bonus > 0)) {
                notif = ". It was not very effective";
            }
            announce.setVisible(true);
            announce.setText(temp + notif + ". Dealt " + (int) (damage * bonus) + " damage");
            System.out.println("damage= " + damage);
            System.out.println("bonus= " + bonus);
            System.out.println("enemy life= " + enemyLives[enemyPokemonCounter]);
            enemyLifeBarProgressBar.setValue(enemyLives[enemyPokemonCounter] * 100 / rs.getInt("HP"));

            if (enemyLives[enemyPokemonCounter] > 0) {
                enemyLifeBarLabel.setText(enemyLives[enemyPokemonCounter] + "");
            } else {
                enemyLifeBarLabel.setText("0");
                return false;
            }

            conn.close();
        } else {
            try {
                Class.forName("com.mysql.jdbc.Driver");
                Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");
                PreparedStatement pst = conn.prepareStatement("Select * from moves where Number = ?");
                pst.setString(1, pokemonlist[currentPokemon] + "");
                ResultSet rs = pst.executeQuery();
                rs.next();
                type = rs.getString("Type");
                System.out.println(type + "");
                conn.close();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
            }
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");
            PreparedStatement pst = conn.prepareStatement("Select * from moves where Number = ?");
            pst.setString(1, enemyPokemonList[enemyPokemonCounter] + "");
            ResultSet rs = pst.executeQuery();
            rs.next();
            enemytype = rs.getString("type" + value);
            System.out.println(enemytype + "");
            damage = rs.getInt(attackDamage);
            bonus = findBonus(enemytype, type);
            int life = playerLives[currentPokemon];
            playerLives[currentPokemon] = (int) (life - (damage * bonus));
            System.out.println("damage= " + damage);
            System.out.println("bonus= " + bonus);
            String notif = "";
            if (bonus == 2) {
                notif = ". It was super effective";
            } else if (bonus == 0) {
                notif = ". It had no effect";
            } else if ((bonus < 1) && (bonus > 0)) {
                notif = ". It was not very effective";
            }
            System.out.println("player life= " + playerLives[currentPokemon]);
            playerLifeBarProgressBar.setValue((playerLives[currentPokemon] * 100 / playerMaxLives[currentPokemon]));
            announce1.setVisible(true);
            announce2.setVisible(true);
            announce1.setText(rs.getString("name") + " uses " + rs.getString("attack" + value) + notif + ". Dealt " + (int) (damage * bonus) + " damage");
            if (playerLives[currentPokemon] > 0) {
                playerLifeBarLabel.setText(playerLives[currentPokemon] + "");
            } else {
                playerLifeBarLabel.setText("0");
                return false;
            }
            conn.close();
        }
        return true;
    }

    private void enemyLifeBarProgressBarStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_enemyLifeBarProgressBarStateChanged

    }//GEN-LAST:event_enemyLifeBarProgressBarStateChanged

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        PokemonIntro a = null;
        switchBtn.setVisible(false);
        if (nextBtn.getText().equals("Next")) {
            try {
                a = new PokemonIntro(user, (19 + (counter_enemy) * 2), gender);
            } catch (SQLException ex) {
                Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (nextBtn.getText().equals("Exit")) {
            try {
                a = new PokemonIntro(user, (17 + (counter_enemy) * 2), gender);
            } catch (SQLException ex) {
                Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        a.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_nextBtnActionPerformed

    private void attack4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attack4ActionPerformed
        try {
            beforeAttack(4);
        } catch (InterruptedException ex) {
            Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_attack4ActionPerformed

    private void attack3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attack3ActionPerformed
        try {
            beforeAttack(3);
        } catch (InterruptedException ex) {
            Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_attack3ActionPerformed

    private void attack2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attack2ActionPerformed
        try {
            beforeAttack(2);
        } catch (InterruptedException ex) {
            Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_attack2ActionPerformed

    private void attack1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_attack1ActionPerformed
        try {
            beforeAttack(1);
        } catch (InterruptedException ex) {
            Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_attack1ActionPerformed

    private void switchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_switchBtnActionPerformed
        PokemonSwitch switcher = new PokemonSwitch(pokemonlist, playerLives, currentPokemon, this, 1);
        switcher.setVisible(true);
        Random rand = new Random();
        int value = rand.nextInt(4);
        announce.setText("");
    }//GEN-LAST:event_switchBtnActionPerformed
    private double findBonus(String type, String enemy) throws SQLException {
        double bonus = 1;
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");
            PreparedStatement pst = conn.prepareStatement("Select * from weakness where pokemon_type = ?");
            pst.setString(1, type + "");
            ResultSet rs = pst.executeQuery();
            rs.next();
            String strong = rs.getString("strong_against");
            String[] sArray = strong.split(" ");
            System.out.println("" + strong);
            System.out.println("" + sArray[0]);
            if (Arrays.asList(sArray).contains(enemy)) {
                System.out.println("strong");
                bonus = 2.0;
            }
            String weak = rs.getString("weak_against");
            String[] wArray = weak.split(" ");
            System.out.println("" + wArray[0]);
            if (Arrays.asList(wArray).contains(enemy)) {
                bonus = bonus / 2;
            }
            String noeffect = rs.getString("noeffect_against");
            String[] nArray = noeffect.split(" ");
            System.out.println("" + nArray);
            if (Arrays.asList(nArray).contains(enemy)) {
                bonus = 0;
            }
            conn.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
        }
        return bonus;
    }

    public void beforeAttack(int count) throws InterruptedException {
        announce2.setVisible(true);
        switchBtn.setVisible(true);
        announce.setText("");
        announce1.setText("");
        announce2.setText("");
        try {
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");
            PreparedStatement pst1 = conn.prepareStatement("Select * from moves where number = ?");
            pst1.setString(1, pokemonlist[currentPokemon] + "");
            ResultSet rs1 = pst1.executeQuery();
            rs1.next();
            PreparedStatement pst2 = conn.prepareStatement("Select * from moves where number = ?");
            pst2.setString(1, enemyPokemonList[enemyPokemonCounter] + "");
            ResultSet rs2 = pst2.executeQuery();
            rs2.next();
            Random rand = new Random();
            int value = rand.nextInt(4);
            if (rs2.getInt("damage" + (value + 1)) < rs1.getInt("damage" + count)) {
                if (enemyAttack(value) == true) {
                    if (attack("damage" + count, "player") == false) {
                        announce2.setText("The Enemy's  " + rs2.getString("name") + " has been defeated.");
                        win++;
                        if (win == 6) {
                            Timer t=new Timer();
                            Timer t2=new Timer();
                            TimerTask tt= new TimerTask(){
                                int count=0;
                                public void run(){
                                    count++;
                                    enemyPokemonImage.setLocation(enemyPokemonImage.getLocation().x, enemyPokemonImage.getLocation().y+5);
                                    if(count>20)t.cancel();
                                }
                            };
                            t.schedule(tt, 1200,100);
                            TimerTask tt2= new TimerTask(){
                                int count=0;
                                public void run(){
                                    announce2.setText("You won. All of the enemy's pokemon was defeated.");
                                    switchBtn.setVisible(false);
                                    nextBtn.setVisible(true);
                                    attack1.setVisible(false);
                                    attack2.setVisible(false);
                                    attack3.setVisible(false);
                                    attack4.setVisible(false);
                                    enemyPokemonImage.setVisible(false);
                                    nextBtn.setText("Next");
                                    t2.cancel();
                                }
                            };
                            t2.schedule(tt2, 3200,50);
                        } else {
                            Timer t=new Timer();
                            Timer t2=new Timer();
                            TimerTask tt= new TimerTask(){
                                int count=0;
                                public void run(){
                                    count++;
                                    enemyPokemonImage.setLocation(enemyPokemonImage.getLocation().x, enemyPokemonImage.getLocation().y+5);
                                    if(count>20)t.cancel();
                                }
                            };
                            t.schedule(tt, 1200,100);
                            TimerTask tt2= new TimerTask(){
                                int count=0;
                                public void run(){
                                    changeEnemyPokemon();
                                    t2.cancel();
                                }
                            };
                            t2.schedule(tt2, 3200,50);
                        }
                    } else {
                        announce2.setText("Enemy pokemon attacks first");
                        atkAnimation(0);
                    }
                } else {
                    announce2.setText("The Player's " + rs1.getString("name") + " has been defeated.");
                    lose++;
                    if (lose == 6) {
                        Timer t= new Timer();
                        Timer t2=new Timer();
                            TimerTask tt= new TimerTask(){
                                int count=0;
                                public void run(){
                                    count++;
                                    playerPokemonImage.setLocation(playerPokemonImage.getLocation().x, playerPokemonImage.getLocation().y+5);
                                    if(count>20)t.cancel();
                                }
                            };
                            t.schedule(tt, 1200,100);
                            TimerTask tt2= new TimerTask(){
                                int count=0;
                                public void run(){       
                                    announce2.setText("You lost. All of your pokemon was defeated.");
                                    switchBtn.setVisible(false);
                                    nextBtn.setVisible(true);
                                    attack1.setVisible(false);
                                    attack2.setVisible(false);
                                    attack3.setVisible(false);
                                    attack4.setVisible(false);
                                    playerPokemonImage.setVisible(false);
                                    nextBtn.setText("Exit");
                                    t2.cancel();
                                }
                            };
                            t2.schedule(tt2, 3200,50);
                    } else {
                        Timer t= new Timer();
                        Timer t2=new Timer();
                            TimerTask tt= new TimerTask(){
                                int count=0;
                                public void run(){
                                    count++;
                                    playerPokemonImage.setLocation(playerPokemonImage.getLocation().x, playerPokemonImage.getLocation().y+5);
                                    if(count>20)t.cancel();
                                }
                            };
                            t.schedule(tt, 1200,100);
                            TimerTask tt2= new TimerTask(){
                                int count=0;
                                public void run(){
                                    PokemonSwitch switcher = new PokemonSwitch(pokemonlist, playerLives, currentPokemon, PokemonBattle.this, 0);
                                    switcher.setVisible(true);
                                    switcher.setNotice("Your pokemon fainted, select another pokemon");
                                    t2.cancel();
                                }
                            };
                            t2.schedule(tt2, 3200,50);
                    }
                }
            } else {
                if (attack("damage" + count, "player") == true) {
                    if (enemyAttack(value) == false) {
                        announce2.setText("The Player's " + rs1.getString("name") + " has been defeated.");
                        lose++;
                        if (lose == 6) {Timer t=new Timer();
                            Timer t2=new Timer();
                            TimerTask tt= new TimerTask(){
                                int count=0;
                                public void run(){
                                    count++;
                                    playerPokemonImage.setLocation(playerPokemonImage.getLocation().x, playerPokemonImage.getLocation().y+5);
                                    if(count>20)t.cancel();
                                }
                            };
                            t.schedule(tt, 1400,100);
                            TimerTask tt2= new TimerTask(){
                                int count=0;
                                public void run(){
                                    announce2.setText("You lost. All of your pokemon was defeated.");
                                    switchBtn.setVisible(false);
                                    nextBtn.setVisible(true);
                                    attack1.setVisible(false);
                                    attack2.setVisible(false);
                                    attack3.setVisible(false);
                                    attack4.setVisible(false);
                                    nextBtn.setText("Exit");
                                    t2.cancel();
                                }
                            };
                            t2.schedule(tt2, 2700,50);
                        } else {
                            Timer t=new Timer();
                            Timer t2=new Timer();
                            TimerTask tt= new TimerTask(){
                                int count=0;
                                public void run(){
                                    count++;
                                    playerPokemonImage.setLocation(playerPokemonImage.getLocation().x, playerPokemonImage.getLocation().y+5);
                                    if(count>20)t.cancel();
                                }
                            };
                            t.schedule(tt, 1400,100);
                            TimerTask tt2= new TimerTask(){
                                int count=0;
                                public void run(){
                                    PokemonSwitch switcher = new PokemonSwitch(pokemonlist, playerLives, currentPokemon, PokemonBattle.this, 0);
                                    switcher.setVisible(true);
                                    switcher.setNotice("Your pokemon fainted, select another pokemon");
                                    t2.cancel();
                                }
                                    
                            };
                            t2.schedule(tt2, 2700,50);
                        }
                    }
                    atkAnimation(1);
                    announce2.setText("Player pokemon attacks first");
                } else {
                    announce2.setText("The Enemy's " + rs2.getString("name") + " has been defeated.");
                    win++;
                    if (win == 6) {
                        Timer t=new Timer();
                            Timer t2=new Timer();
                            TimerTask tt= new TimerTask(){
                                int count=0;
                                public void run(){
                                    count++;
                                    enemyPokemonImage.setLocation(enemyPokemonImage.getLocation().x, enemyPokemonImage.getLocation().y+5);
                                    if(count>20)t.cancel();
                                }
                            };
                            t.schedule(tt, 1200,100);
                            TimerTask tt2= new TimerTask(){
                                int count=0;
                                public void run(){
                                    announce2.setText("You won. All of the enemy's pokemon was defeated.");
                                    switchBtn.setVisible(false);
                                    nextBtn.setVisible(true);
                                    attack1.setVisible(false);
                                    attack2.setVisible(false);
                                    attack3.setVisible(false);
                                    attack4.setVisible(false);
                                    enemyPokemonImage.setVisible(false);
                                    nextBtn.setText("Next");
                                    t2.cancel();
                                }
                            };
                            t2.schedule(tt2, 3200,50);
                    } else {
                        Timer t=new Timer();
                            Timer t2=new Timer();
                            TimerTask tt= new TimerTask(){
                                int count=0;
                                public void run(){
                                    count++;
                                    enemyPokemonImage.setLocation(enemyPokemonImage.getLocation().x, enemyPokemonImage.getLocation().y+5);
                                    if(count>20)t.cancel();
                                }
                            };
                            t.schedule(tt, 1200,100);
                            TimerTask tt2= new TimerTask(){
                                int count=0;
                                public void run(){
                                    changeEnemyPokemon();
                                    t2.cancel();
                                }
                            };
                            t2.schedule(tt2, 3200,50);
                    }
                }
            }
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * @param args the command line arguments
     */
    public void changeEnemyPokemon() {
        enemyPokemonCounter++;
        try {
            changeEnemyPokemonImage(enemyPokemonList[enemyPokemonCounter]);
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");
            PreparedStatement pst = conn.prepareStatement("Select * from moves where Number = ?");
            pst.setString(1, enemyPokemonList[enemyPokemonCounter] + "");
            ResultSet rs = pst.executeQuery();
            rs.next();
            announce2.setText(announce2.getText() + " " + rs.getString("name") + " was called out.");
            enemyPokemonName.setText(rs.getString("Name"));
            enemyLifeBarLabel.setText(rs.getInt("HP") + "");
            enemyLifeBarProgressBar.setValue(100);
            conn.close();
        } catch (SQLException ex) {
            Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PokemonBattle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PokemonBattle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PokemonBattle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PokemonBattle.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new PokemonBattle().setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel announce;
    private javax.swing.JLabel announce1;
    private javax.swing.JLabel announce2;
    private javax.swing.JButton attack1;
    private javax.swing.JButton attack2;
    private javax.swing.JButton attack3;
    private javax.swing.JButton attack4;
    private javax.swing.JLabel enemy;
    private javax.swing.JLabel enemyLifeBarLabel;
    private javax.swing.JProgressBar enemyLifeBarProgressBar;
    private javax.swing.JLabel enemyPokemonImage;
    private javax.swing.JLabel enemyPokemonName;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton nextBtn;
    private javax.swing.JLabel playerLifeBarLabel;
    private javax.swing.JProgressBar playerLifeBarProgressBar;
    private javax.swing.JLabel playerPokemonImage;
    private javax.swing.JLabel pokemonName;
    private javax.swing.JButton switchBtn;
    // End of variables declaration//GEN-END:variables

    private void initPokemon(String user, int pokemon_order) throws SQLException {
        changeEnemyImage(trainers[counter_enemy]);
//        System.out.println("marker");

        try {
            //select from user database to get the pokemon list
            //select the first pokemon, then display it.

            int pokemonNumber = pokemon_order;
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");

            PreparedStatement pst = conn.prepareStatement("Select * from moves where Number = ?");
            pst.setString(1, pokemonlist[pokemonNumber] + "");
            ResultSet rs = pst.executeQuery();
            rs.next();
            pokemonName.setText(rs.getString("Name"));
            attack1.setText(rs.getString("attack1"));
            attack2.setText(rs.getString("attack2"));
            attack3.setText(rs.getString("attack3"));
            attack4.setText(rs.getString("attack4"));
            playerLifeBarLabel.setText(playerLives[pokemonNumber] + "");
            changeUserPokemonImage(pokemonlist[pokemonNumber]);
            changeEnemyPokemonImage(enemyPokemonList[enemyPokemonCounter]);
            conn.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");

            PreparedStatement pst = conn.prepareStatement("Select * from moves where Number = ?");
            pst.setString(1, enemyPokemonList[enemyPokemonCounter] + "");
            ResultSet rs = pst.executeQuery();
            rs.next();
            enemyPokemonName.setText(rs.getString("Name"));
            enemyLifeBarLabel.setText(enemyLives[enemyPokemonCounter] + "");
            conn.close();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(PokemonBattle.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    void setPokemon(int enemyattacks, int current_pokemon) throws SQLException, InterruptedException {
        initPokemon(user, current_pokemon);
        announce2.setText("Player switched to the Pokemon " + pokemonName.getText());
        playerLifeBarProgressBar.setValue(playerLives[current_pokemon] * 100 / playerMaxLives[current_pokemon]);
        playerLifeBarLabel.setText(playerLives[currentPokemon] + "");
        Random rand = new Random();
        int value = rand.nextInt(4);
        if (enemyattacks == 1) {
            atkAnimation(2);
            enemyAttack(value);
        }
    }

    private void initLives() throws ClassNotFoundException, SQLException {
        Class.forName("com.mysql.jdbc.Driver");
        Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");
//getting the life of the pokemons of the player
        PreparedStatement pst1 = conn.prepareStatement("Select * from moves where Number = ?");
        for (int i = 0; i < 6; i++) {
            pst1.setString(1, pokemonlist[i] + "");
            ResultSet rs = pst1.executeQuery();
            rs.next();
            playerLives[i] = Integer.parseInt(rs.getString("HP"));
            playerMaxLives[i] = Integer.parseInt(rs.getString("HP"));
        }
//getting the life of the pokemons of the enemy   
        PreparedStatement pst2 = conn.prepareStatement("Select * from moves where Number = ?");
        for (int i = 0; i < 6; i++) {
            pst2.setString(1, enemyPokemonList[i] + "");
            ResultSet rs = pst2.executeQuery();
            rs.next();
            enemyLives[i] = Integer.parseInt(rs.getString("HP"));
        }
        conn.close();
    }

    private void initPokemonLists() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon_user?" + "user=root&password=");
            PreparedStatement pst = conn.prepareStatement("Select * from login where username = ?");
            pst.setString(1, user);
            ResultSet rs = pst.executeQuery();
            rs.next();
            for (int i = 1; i <= 6; i++) {
                pokemonlist[i - 1] = Integer.parseInt(rs.getString("pokemon" + i));
                System.out.println(pokemonlist[i - 1]);
            }
            conn.close();
        } catch (Exception e) {
            System.out.println("Error");
        }
//        System.out.println("enemy marker");
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/pokemon?" + "user=root&password=");
            PreparedStatement pst = conn.prepareStatement("Select * from trainers where Name = ?");
            pst.setString(1, trainers[counter_enemy]);
            ResultSet rs = pst.executeQuery();
            rs.next();
            for (int i = 1; i <= 6; i++) {
                enemyPokemonList[i - 1] = Integer.parseInt(rs.getString("pokemon" + i));
                System.out.println(enemyPokemonList[i - 1]);
            }

//            System.out.println("image should have changed by now");
            conn.close();
        } catch (Exception e) {
            System.out.println("Error");
        }
    }
    public void atkAnimation(int type ) throws InterruptedException{
        Timer t = new Timer();
        Timer t2= new Timer();
        TimerTask tt= new TimerTask(){
            int count=0;
            public void run(){
                count++;
                if(count<=5)enemyPokemonImage.setLocation(enemyPokemonImage.getLocation().x-3, enemyPokemonImage.getLocation().y);
                if(count>5)enemyPokemonImage.setLocation(enemyPokemonImage.getLocation().x+3, enemyPokemonImage.getLocation().y);
                if(count>11)t.cancel();
                if(count%2==0)playerPokemonImage.setLocation(playerPokemonImage.getLocation().x-5, playerPokemonImage.getLocation().y);
                if(count%2!=0)playerPokemonImage.setLocation(playerPokemonImage.getLocation().x+5, playerPokemonImage.getLocation().y);
            }
        };
        TimerTask tt2= new TimerTask(){
            int count=0;
            public void run(){
                count++;
                if(count<=5)playerPokemonImage.setLocation(playerPokemonImage.getLocation().x+3, playerPokemonImage.getLocation().y);
                if(count>5)playerPokemonImage.setLocation(playerPokemonImage.getLocation().x-3, playerPokemonImage.getLocation().y);
                if(count>11)t2.cancel();
                if(count%2==0)enemyPokemonImage.setLocation(enemyPokemonImage.getLocation().x-5, enemyPokemonImage.getLocation().y);
                if(count%2!=0)enemyPokemonImage.setLocation(enemyPokemonImage.getLocation().x+5, enemyPokemonImage.getLocation().y);
            }
        };
        if(type==0){
            t.scheduleAtFixedRate(tt, 0, 60);
            t2.scheduleAtFixedRate(tt2, 1000, 60);
        }
        else if(type==1){
            t2.scheduleAtFixedRate(tt2, 0, 60);
            t.scheduleAtFixedRate(tt, 1000, 60);
        }
        else if(type==2){
            t.scheduleAtFixedRate(tt, 0, 60);
        }
    }
}



